{
  "name": "SpeedTyping",
  "tagline": "",
  "body": "## Part 1: \"Hello world\" and setting up an environment\r\n \r\nFirst of all, let's install [Webstorm](https://www.jetbrains.com/webstorm/) Javascript IDE as an editor for our project, which is a very convenient tool for developing js applications and has ES6 syntax support. \r\nNext step is to install node.js. As I am a windows user (I am sorry for that :)), I have installed it from [here](https://nodejs.org/en/download/) and nvm (Node version manager) - from [here](https://github.com/coreybutler/nvm-windows). Note that, first you need to install node and then nvm.\r\n\r\nNow, let's create a new blank(empty) project from Webstorm. If we want to check that node.js is correctly installed, run Webstorm terminal (alt + F12) and check with entering a command `node -v` and `nvm -v`. \r\n\r\nNow, to set up dependecies, we need to run `npm init`\r\nThis will ask you some questions, and then write a package.json for you. In the end the package.json looks like this:\r\n\r\n    {\r\n      \"name\": \"speedtyping\",\r\n      \"version\": \"1.0.0\",\r\n      \"description\": \"\",\r\n      \"main\": \"main.js\",\r\n      \"dependencies\": {},\r\n      \"devDependencies\": {},\r\n      \"scripts\": {\r\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n      },\r\n      \"author\": \"\",\r\n      \"license\": \"ISC\"\r\n    }\r\n\r\nThe assets must be bundled by a modern bundler, so we will use [Webpack](http://webpack.github.io/) bundler for this. Webpack is a module bundler which combines all javascript files and produces them into one (bundle.js) which can be understood by browsers. It also provides a development server to run the code in development environment. This server watches all files and re-bundles the project on every change. \r\n\r\nTo install webpack and webpack development server, run following commands: `npm install webpack --save` and `npm install webpack-dev-server --save`. After that you will notice that node_modules folder is generated in the project, which consists of all libraries what is needed for webpack. And also you will notice that two lines(    `\"webpack\": \"^1.12.14\", \"webpack-dev-server\": \"^1.14.1\"`) will be added to package.json dependecies. Note that, other developers do not need to run commands for webpack installation again once we have them in package.json, all they do is just `npm install` and webpack will be installed automatically. \r\nTo run the code with npm start, we need to add following line to \"scripts\" in package.json: `\"start\": \"webpack-dev-server\"`.\r\n\r\nAfter that we already are able to run a code on the server, which displays just the folders and files we have in a project. \r\nNow we are ready to create a simple \"Hello world\" app. Let's create index.html file with following html code:\r\n\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Title</title>\r\n    </head>\r\n    <body>\r\n        Data not from DOM manipulation\r\n        <script type=\"text/javascript\" src=\"bundle.js\"></script>\r\n    </body>\r\n\r\n    </html>\r\n\r\nNote that, we do not have bundle.js yet, it will be generated by webpack on the server after 'bundling' the code.\r\nNow we create three javascript files (in js folder), just to have a simple application. First one is hello.js which just manipulates DOM in index.html and puts \"Hello world\" in the body:\r\n\r\n    var hello = function(){\r\n        document.body.innerHTML = \"Hello World!\";\r\n    }\r\n\r\n    module.exports = hello\r\n\r\nSecond one is robot.js which corresponds the class Robot and has a method for printing some text in a console:\r\n\r\n    class Robot {\r\n        beep() {\r\n            console.log(\"beep\");\r\n        };\r\n    }\r\n\r\n    module.exports = Robot;\r\n\r\nAnd the last javascript file is the main one (main.js) which requires hello.js file and robot.js files and calls their methods:\r\n\r\n    var hello = require(\"./hello.js\")\r\n    hello()\r\n\r\n    var Robot = require('./robot');\r\n    var robot = new Robot();\r\n    robot.beep()\r\n\r\nNow we already have javascript files, so we need more 'clever' webpack to run the code and convert it into bundle.js. \r\nFor that reason, we create webpack.config.js file in root folder of the project and put following piece of code: \r\n\r\n    module.exports = {\r\n        entry: './js/main.js',\r\n        output: {\r\n            filename: 'bundle.js'\r\n        },\r\n        devServer: {\r\n            port: 3000\r\n        }\r\n    };\r\n\r\nWith that we are telling webpack that it has to take main.js as an entry and bundle.js as an output file and run the server at 3000 port. Also do not forget to include in package.json that the main file is main.js (`\"main\": \"js/main.js\"`).\r\n\r\nRun `npm start` and enter `localhost:3000` in the browser. You will see \"Hello World\" there and \"beep\" in a console. Note that, the assets are rebundled on change to any of javascript files. E.g put `console.log(\"boop\");` in beep function and after refreshing a page boop will appear in a console.\r\n\r\nAs we are using classes in javascript, it automatically means that we are using es6 (ECMAScript 2015). Since this language is not supported fully in all browsers, we need a transpiler that takes code in ECMAScript 2015 standard and produces it in the older standard that browsers can run. The great tool for that is [Babel](http://babeljs.io/). To install babel in our project, add following three lines in package.json dependencies and then run `npm install`:\r\n\r\n    \"babel-cli\": \"^6.5.1\",\r\n    \"babel-preset-es2015\": \"^6.5.0\",\r\n    \"babel-loader\": \"^6.2.1\",\r\n    \"babel-preset-react\": \"^6.3.13\",\r\n    \"babelify\": \"^7.2.0\"\r\n\r\nWe also need to configure babel loader in webpack.config.js file:\r\n    \r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /.js?$/,\r\n                loader: 'babel-loader',\r\n                exclude: /node_modules/,\r\n                query: {\r\n                    presets: ['es2015', 'react']\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\nAfter that the project has ES6 support.\r\n\r\n## Part 2: Introduction to React, Speed typing single player game\r\n\r\nWe will build UI view components using [React](https://facebook.github.io/react/index.html) library. To install it put following dependecies in package.json and run `npm install`:\r\n    \r\n    \"react\": \"^0.14.7\",\r\n    \"react-dom\": \"^0.14.7\"\r\n\r\nA view for a single player game consists of:\r\n* an area where random words are displayed\r\n* an input for an user\r\n* statistics: words per minute and accuracy\r\n\r\nLet's first build a component for statistics, which is very simple and will show main idea of composing multiple components in React.\r\nWe will build 3 components for that; A top-level component logically is Statistics, which consists of two child components, Speed (Words per minute) and Accuracy. \r\n\r\nFirst, create components folder in js to have seperate folder for the React components. Then create   \r\n3 javascript files inside it: `statistics.js`, `speed.js`, and `accuracy.js`. Each file corresponds to each component.\r\n\r\nSpeed component renders a div which simply displays a string and value of words per minute:\r\n\r\n    import React from 'react';\r\n    import ReactDOM from 'react-dom';\r\n\r\n    var SpeedComponent = React.createClass({\r\n    \r\n        render: function () {\r\n            return (\r\n\r\n                <div className=\"speed\">\r\n                    Words per minute: {this.props.value}\r\n                </div>\r\n            );\r\n        }\r\n    })\r\n\r\n    export default SpeedComponent;\r\n\r\nSimilarly, Accuracy component displays `div` with string and value of accuracy:\r\n \r\n    import React from 'react';\r\n    import ReactDOM from 'react-dom';\r\n\r\n    var AccuracyComponent = React.createClass({\r\n\r\n        render: function () {\r\n            return (\r\n                <div className=\"accuracy\">\r\n                    Accuracy: {this.props.value}\r\n                </div>\r\n            );\r\n        }\r\n    })\r\n\r\n    export default AccuracyComponent;\r\n\r\nStatistics component renders two components we defined above and passes hard-coded property values to them. Note that properties are called props in React; They are immutable and are passed from parent component to children.\r\n\r\n    import React from 'react';\r\n    import ReactDOM from 'react-dom';\r\n    import SpeedComponent from  './speed'\r\n    import AccuracyComponent from './accuracy'\r\n\r\n\r\n    var Statistics = React.createClass({\r\n\r\n        render: function () {\r\n            return (\r\n                <div className=\"statistics\">\r\n                    <SpeedComponent value={0}/>\r\n                    <AccuracyComponent value={0}/>\r\n                </div>\r\n            );\r\n        }\r\n    })\r\n\r\n    export default Statistics;\r\n\r\nNow we create an input component for an user to type (input.js):\r\n\r\n    var InputBox = React.createClass({\r\n    \r\n        getInitialState: function() {\r\n            return {input: ''};\r\n        },\r\n    \r\n        handleInputText: function (e) {\r\n            this.setState({input: e.target.value});\r\n        },\r\n    \r\n        render: function () {\r\n            return (\r\n                <div className=\"inputBox\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Type words here\"\r\n                        value={this.state.input}\r\n                        onChange={this.handleInputText}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    })\r\n    \r\n    export default InputBox;\r\n\r\nThe html input element property is bound to the state of the input component. On every input change it calls method `handleInputText `which changes the state of the input. \r\n\r\nNow we can display these 2 main components we have already created. Import these two components into main.js file and render them into main component called `GameComponents`. \r\n\r\n    import InputBox from './components/input';\r\n    import Statistics from './components/statistics'\r\n    \r\n    \r\n    var GameComponents = React.createClass({\r\n        render: function () {\r\n            return (\r\n                <div className=\"gameComponents\">\r\n                    <h1>Speed Typing app</h1>\r\n                    <InputBox />\r\n                    <br/>\r\n                    <Statistics />\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n\r\nAfter that we need to create main game component and put it into div with id content (Don't forget to add this `div `in `index.html`)\r\nHere is the snippet to do this:\r\n    \r\n    ReactDOM.render(\r\n        React.createElement(GameComponents, null),\r\n        document.getElementById('content')\r\n    );\r\n\r\nNow run the app (`npm start`). You will see that input displayed for an user, where you can type something. You will also see two lines  which displays statistics.\r\n\r\nTo be continued... (Have not added the part for words content yet, because I think it needs some fixes)",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}